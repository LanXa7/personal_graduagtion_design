/* tslint:disable */
/* eslint-disable */
/**
 * Graduation Design Service - version 1
 *
 * Graduation Design Service API
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type EmailCodeRequest = {
  email?: string;
  type?: string;
};
export type UserResetPasswordInput = {
  email?: string;
  password?: string;
  code?: string;
};
export type UserLoginView = {
  username?: string;
  phone?: string;
  email?: string;
  token?: string;
  expire?: number;
  roles?: string[];
  permissions?: string[];
};
export type UserLoginInput = {
  password?: string;
  text?: string;
};
export type UserRegisterInput = {
  username?: string;
  email?: string;
  phone?: string;
  password?: string;
  code?: string;
};
export type CanteenSaveInput = {
  name?: string;
  directorName?: string;
  directorPhone?: string;
  address?: string;
};
export type Canteen_CanteenService_CANTEEN_STALL_NUMBER_FETCHER = {
  id?: number;
  name?: string;
  stallNumber?: number;
};
export type Stall_CanteenService_STALL_FOOD_NUMBER_FETCHER = {
  id?: number;
  name?: string;
  foodNumber?: number;
};
export type Canteen_CanteenService_CANTEEN_LIST_FETCHER = {
  id?: number;
  name?: string;
};
export type Canteen_CanteenService_CANTEEN_FETCHER_user = {
  id?: number;
  username?: string;
};
export type Canteen_CanteenService_CANTEEN_FETCHER = {
  id?: number;
  name?: string;
  directorName?: string;
  directorPhone?: string;
  address?: string;
  createTime?: string;
  user?: Canteen_CanteenService_CANTEEN_FETCHER_user;
};
export type Page_Canteen_CanteenService_CANTEEN_FETCHER = {
  rows?: Canteen_CanteenService_CANTEEN_FETCHER[];
  totalPageCount?: number;
  totalRowCount?: number;
};
export type DictView = {
  label?: string;
  value?: string;
  dictType?: string;
};
export type DictType_DictService_DICT_TYPE_ALL_FETCHER = {
  id?: number;
  code?: string;
};
export type DictData_DictService_DICT_DATA_ALL_BY_TYPE_FETCHER = {
  id?: number;
  label?: string;
  value?: string;
};
export type FoodSaveInput = {
  name?: string;
  code?: string;
  price?: number;
  picture?: string;
  description?: string;
  stallId?: number;
};
export type Food_FoodService_FOOD_LIST_FETCHER = {
  id?: number;
  name?: string;
  picture?: string;
  price?: number;
};
export type Food_FoodService_FOOD_FETCHER_stall_canteen = {
  id?: number;
  name?: string;
};
export type Food_FoodService_FOOD_FETCHER_stall = {
  id?: number;
  name?: string;
  canteen?: Food_FoodService_FOOD_FETCHER_stall_canteen;
};
export type Food_FoodService_FOOD_FETCHER = {
  id?: number;
  name?: string;
  picture?: string;
  code?: string;
  description?: string;
  createTime?: string;
  price?: number;
  stall?: Food_FoodService_FOOD_FETCHER_stall;
};
export type Page_Food_FoodService_FOOD_FETCHER = {
  rows?: Food_FoodService_FOOD_FETCHER[];
  totalPageCount?: number;
  totalRowCount?: number;
};
export type OrderPayView_TargetOf_orderItems_TargetOf_food = {
  name?: string;
};
export type OrderPayView_TargetOf_orderItems = {
  totalPrice?: number;
  totalNumber?: number;
  food?: OrderPayView_TargetOf_orderItems_TargetOf_food;
};
export type OrderPayView = {
  code?: string;
  totalPrice?: number;
  picture?: string;
  orderItems?: OrderPayView_TargetOf_orderItems[];
  qrCode?: string;
};
export type Dynamic_Canteen = {
  createTime?: string;
  modifyTime?: string;
  creator?: number;
  modifier?: number;
  id?: number;
  name?: string;
  directorName?: string;
  directorPhone?: string;
  address?: string;
  stallNumber?: number;
  user?: Dynamic_User;
  stalls?: Dynamic_Stall[];
};
export type Dynamic_Permission = {
  createTime?: string;
  modifyTime?: string;
  creator?: number;
  modifier?: number;
  id?: number;
  code?: string;
  roles?: Dynamic_Role[];
};
export type Dynamic_Role = {
  createTime?: string;
  modifyTime?: string;
  creator?: number;
  modifier?: number;
  id?: number;
  code?: string;
  users?: Dynamic_User[];
  permissions?: Dynamic_Permission[];
};
export type Dynamic_User = {
  createTime?: string;
  modifyTime?: string;
  modifier?: number;
  id?: number;
  username?: string;
  phone?: string;
  password?: string;
  email?: string;
  avatar?: string;
  roles?: Dynamic_Role[];
  canteen?: Dynamic_Canteen;
  stall?: Dynamic_Stall;
};
export type Dynamic_OrderItem = {
  createTime?: string;
  modifyTime?: string;
  modifier?: number;
  id?: number;
  totalNumber?: number;
  totalPrice?: number;
  order?: Dynamic_Order;
  food?: Dynamic_Food;
};
export type Dynamic_Sales = {
  modifier?: number;
  createTime?: string;
  modifyTime?: string;
  id?: number;
  number?: number;
  food?: Dynamic_Food;
  stall?: Dynamic_Stall;
};
export type Dynamic_Food = {
  createTime?: string;
  modifyTime?: string;
  creator?: number;
  modifier?: number;
  id?: number;
  name?: string;
  code?: string;
  price?: number;
  picture?: string;
  description?: string;
  stall?: Dynamic_Stall;
  orderItems?: Dynamic_OrderItem[];
  sales?: Dynamic_Sales;
};
export type Dynamic_Stall = {
  createTime?: string;
  modifyTime?: string;
  creator?: number;
  modifier?: number;
  id?: number;
  name?: string;
  directorName?: string;
  directorPhone?: string;
  foodNumber?: number;
  user?: Dynamic_User;
  canteen?: Dynamic_Canteen;
  orders?: Dynamic_Order[];
  foods?: Dynamic_Food[];
  sales?: Dynamic_Sales[];
};
export type Dynamic_Order = {
  createTime?: string;
  modifyTime?: string;
  modifier?: number;
  id?: number;
  code?: string;
  totalPrice?: number;
  picture?: string;
  state?: number;
  stall?: Dynamic_Stall;
  orderItems?: Dynamic_OrderItem[];
};
export type CanteenSalesResponse = {
  stallName?: string;
  sales?: number;
};
export type SalesHistoryView = {
  number?: number;
  day?: string;
};
export type CanteenStallSalesResponse = {
  stallName?: string;
  sales?: number;
};
export type StallFoodSalesResponse = {
  foodName?: string;
  sales?: number;
};
export type StallSaveInput = {
  name?: string;
  directorName?: string;
  directorPhone?: string;
  canteenId?: number;
};
export type Stall_StallService_STALL_FOOD_NUMBER_FETCHER = {
  id?: number;
  foodNumber?: number;
  name?: string;
};
export type Stall_StallService_STALL_LIST_FETCHER_canteen = {
  id?: number;
  name?: string;
};
export type Stall_StallService_STALL_LIST_FETCHER = {
  id?: number;
  name?: string;
  canteen?: Stall_StallService_STALL_LIST_FETCHER_canteen;
};
export type Stall_StallService_STALL_FETCHER_canteen = {
  id?: number;
  name?: string;
};
export type Stall_StallService_STALL_FETCHER_user = {
  id?: number;
  username?: string;
};
export type Stall_StallService_STALL_FETCHER = {
  id?: number;
  createTime?: string;
  modifyTime?: string;
  creator?: number;
  modifier?: number;
  name?: string;
  directorName?: string;
  directorPhone?: string;
  canteen?: Stall_StallService_STALL_FETCHER_canteen;
  user?: Stall_StallService_STALL_FETCHER_user;
};
export type Page_Stall_StallService_STALL_FETCHER = {
  rows?: Stall_StallService_STALL_FETCHER[];
  totalPageCount?: number;
  totalRowCount?: number;
};
export type UserInfoView = {
  id?: number;
  username?: string;
  email?: string;
  phone?: string;
  createTime?: string;
  avatar?: string;
  roles?: string[];
};
export type UserUpdateEmailInput = {
  email?: string;
  code?: string;
};
export type Page_Dynamic_User = {
  rows?: Dynamic_User[];
  totalPageCount?: number;
  totalRowCount?: number;
};
export type UserUpdatePasswordInput = {
  oldPassword?: string;
  newPassword?: string;
};
export type KSimpleSaveResult_Dynamic_User = {
  isRowAffected?: boolean;
  totalAffectedRowCount?: number;
  affectedRowCountMap?: Record<string, number>;
  originalEntity?: Dynamic_User;
  modifiedEntity?: Dynamic_User;
  isModified?: boolean;
};
export type UserUpdateRoleInput = {
  id?: number;
  roleIds?: number[];
};
export type UserAdminResetPasswordInput = {
  password?: string;
};
declare global {
  interface Apis {
    AuthController: {
      /**
       * ---
       *
       * [POST] 获取验证码
       *
       * **path:** /auth/code
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string
       *   type?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      queryCode<
        Config extends Alova2MethodConfig<unknown> & {
          data: EmailCodeRequest;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'AuthController.queryCode', Config>;
      /**
       * ---
       *
       * [GET] 验证重置验证码是否正确
       *
       * **path:** /auth/confirm
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   email: string
       *   // [required]
       *   code: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      confirm<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            /**
             * [required]
             */
            email: string;
            /**
             * [required]
             */
            code: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'AuthController.confirm', Config>;
      /**
       * ---
       *
       * [GET] 退出
       *
       * **path:** /auth/logout
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      logout<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'AuthController.logout', Config>;
      /**
       * ---
       *
       * [PUT] 重置密码
       *
       * **path:** /auth/password
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string
       *   password?: string
       *   code?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      resetPassword<
        Config extends Alova2MethodConfig<unknown> & {
          data: UserResetPasswordInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'AuthController.resetPassword', Config>;
      /**
       * ---
       *
       * [POST] 登录
       *
       * **path:** /auth/sign_in
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   password?: string
       *   text?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   username?: string
       *   phone?: string
       *   email?: string
       *   token?: string
       *   expire?: number
       *   roles?: string[]
       *   permissions?: string[]
       * }
       * ```
       */
      signIn<
        Config extends Alova2MethodConfig<UserLoginView> & {
          data: UserLoginInput;
        }
      >(
        config: Config
      ): Alova2Method<UserLoginView, 'AuthController.signIn', Config>;
      /**
       * ---
       *
       * [POST] 注册
       *
       * **path:** /auth/sign_up
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   username?: string
       *   email?: string
       *   phone?: string
       *   password?: string
       *   code?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      signUp<
        Config extends Alova2MethodConfig<unknown> & {
          data: UserRegisterInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'AuthController.signUp', Config>;
    };
    CanteenController: {
      /**
       * ---
       *
       * [POST] 新增食堂
       *
       * **path:** /canteen
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   name?: string
       *   directorName?: string
       *   directorPhone?: string
       *   address?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      createCanteen<
        Config extends Alova2MethodConfig<unknown> & {
          data: CanteenSaveInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'CanteenController.createCanteen', Config>;
      /**
       * ---
       *
       * [GET] 超级管理员用
       *
       * **path:** /canteen/every/stall_number
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   id?: number
       *   name?: string
       *   stallNumber?: number
       * }>
       * ```
       */
      listEveryStallNumber<Config extends Alova2MethodConfig<Canteen_CanteenService_CANTEEN_STALL_NUMBER_FETCHER[]>>(
        config?: Config
      ): Alova2Method<
        Canteen_CanteenService_CANTEEN_STALL_NUMBER_FETCHER[],
        'CanteenController.listEveryStallNumber',
        Config
      >;
      /**
       * ---
       *
       * [GET] 食堂管理员用
       *
       * **path:** /canteen/every_stall/food/number
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   id?: number
       *   name?: string
       *   foodNumber?: number
       * }>
       * ```
       */
      listEveryStallFoodCount<Config extends Alova2MethodConfig<Stall_CanteenService_STALL_FOOD_NUMBER_FETCHER[]>>(
        config?: Config
      ): Alova2Method<
        Stall_CanteenService_STALL_FOOD_NUMBER_FETCHER[],
        'CanteenController.listEveryStallFoodCount',
        Config
      >;
      /**
       * ---
       *
       * [GET] 获得食堂列表
       *
       * **path:** /canteen/list
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   id?: number
       *   name?: string
       * }>
       * ```
       */
      listCanteen<Config extends Alova2MethodConfig<Canteen_CanteenService_CANTEEN_LIST_FETCHER[]>>(
        config?: Config
      ): Alova2Method<Canteen_CanteenService_CANTEEN_LIST_FETCHER[], 'CanteenController.listCanteen', Config>;
      /**
       * ---
       *
       * [GET] 超级管理员用
       *
       * **path:** /canteen/number
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = number
       * ```
       */
      getCanteenNumber<Config extends Alova2MethodConfig<number>>(
        config?: Config
      ): Alova2Method<number, 'CanteenController.getCanteenNumber', Config>;
      /**
       * ---
       *
       * [GET] 获取食堂分页
       *
       * **path:** /canteen/page
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   pageIndex: number
       *   // [required]
       *   pageSize: number
       *   // [required]
       *   canteenName: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   rows?: Array<{
       *     id?: number
       *     name?: string
       *     directorName?: string
       *     directorPhone?: string
       *     address?: string
       *     createTime?: string
       *     user?: {
       *       id?: number
       *       username?: string
       *     }
       *   }>
       *   totalPageCount?: number
       *   totalRowCount?: number
       * }
       * ```
       */
      pageCanteen<
        Config extends Alova2MethodConfig<Page_Canteen_CanteenService_CANTEEN_FETCHER> & {
          params: {
            /**
             * [required]
             */
            pageIndex: number;
            /**
             * [required]
             */
            pageSize: number;
            /**
             * [required]
             */
            canteenName: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Page_Canteen_CanteenService_CANTEEN_FETCHER, 'CanteenController.pageCanteen', Config>;
      /**
       * ---
       *
       * [PUT] 修改食堂
       *
       * **path:** /canteen/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   name?: string
       *   directorName?: string
       *   directorPhone?: string
       *   address?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      updateCanteen<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          data: CanteenSaveInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'CanteenController.updateCanteen', Config>;
      /**
       * ---
       *
       * [DELETE] 删除食堂
       *
       * **path:** /canteen/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      deleteCanteen<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'CanteenController.deleteCanteen', Config>;
      /**
       * ---
       *
       * [PATCH] 给食堂分配管理员
       *
       * **path:** /canteen/{id}/user/{userId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       *   // [required]
       *   userId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      allocationCanteen<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
            /**
             * [required]
             */
            userId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'CanteenController.allocationCanteen', Config>;
    };
    DictController: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /dict
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   label?: string
       *   value?: string
       *   dictType?: string
       * }>
       * ```
       */
      queryDict<Config extends Alova2MethodConfig<DictView[]>>(
        config?: Config
      ): Alova2Method<DictView[], 'DictController.queryDict', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /dict/type
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   id?: number
       *   code?: string
       * }>
       * ```
       */
      queryDictTypes<Config extends Alova2MethodConfig<DictType_DictService_DICT_TYPE_ALL_FETCHER[]>>(
        config?: Config
      ): Alova2Method<DictType_DictService_DICT_TYPE_ALL_FETCHER[], 'DictController.queryDictTypes', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /dict/{typeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   typeId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   id?: number
       *   label?: string
       *   value?: string
       * }>
       * ```
       */
      queryDataByTypeId<
        Config extends Alova2MethodConfig<DictData_DictService_DICT_DATA_ALL_BY_TYPE_FETCHER[]> & {
          pathParams: {
            /**
             * [required]
             */
            typeId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<DictData_DictService_DICT_DATA_ALL_BY_TYPE_FETCHER[], 'DictController.queryDataByTypeId', Config>;
    };
    FoodController: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /food
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   name?: string
       *   code?: string
       *   price?: number
       *   picture?: string
       *   description?: string
       *   stallId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      createFood<
        Config extends Alova2MethodConfig<unknown> & {
          data: FoodSaveInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'FoodController.createFood', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /food/list
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   id?: number
       *   name?: string
       *   picture?: string
       *   price?: number
       * }>
       * ```
       */
      listFood<Config extends Alova2MethodConfig<Food_FoodService_FOOD_LIST_FETCHER[]>>(
        config?: Config
      ): Alova2Method<Food_FoodService_FOOD_LIST_FETCHER[], 'FoodController.listFood', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /food/number
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = number
       * ```
       */
      getFoodNumber<Config extends Alova2MethodConfig<number>>(
        config?: Config
      ): Alova2Method<number, 'FoodController.getFoodNumber', Config>;
      /**
       * ---
       *
       * [GET] 餐品数据分页
       *
       * **path:** /food/page
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   pageIndex: number
       *   // [required]
       *   pageSize: number
       *   // [required]
       *   canteenId: number
       *   // [required]
       *   stallId: number
       *   // [required]
       *   foodName: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   rows?: Array<{
       *     id?: number
       *     name?: string
       *     picture?: string
       *     code?: string
       *     description?: string
       *     createTime?: string
       *     price?: number
       *     stall?: {
       *       id?: number
       *       name?: string
       *       canteen?: {
       *         id?: number
       *         name?: string
       *       }
       *     }
       *   }>
       *   totalPageCount?: number
       *   totalRowCount?: number
       * }
       * ```
       */
      pageFood<
        Config extends Alova2MethodConfig<Page_Food_FoodService_FOOD_FETCHER> & {
          params: {
            /**
             * [required]
             */
            pageIndex: number;
            /**
             * [required]
             */
            pageSize: number;
            /**
             * [required]
             */
            canteenId: number;
            /**
             * [required]
             */
            stallId: number;
            /**
             * [required]
             */
            foodName: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Page_Food_FoodService_FOOD_FETCHER, 'FoodController.pageFood', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /food/picture
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   stallId: number
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   file?: Blob
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string
       * ```
       */
      uploadPicture<
        Config extends Alova2MethodConfig<string> & {
          params: {
            /**
             * [required]
             */
            stallId: number;
            /**
             * [required]
             */
            id: number;
          };
          data: {
            file?: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'FoodController.uploadPicture', Config>;
      /**
       * ---
       *
       * [GET] 获得餐品推荐
       *
       * **path:** /food/recommendation
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Record<
       *   string,
       *   Array<{
       *     id?: number
       *     name?: string
       *     picture?: string
       *     price?: number
       *   }>
       * >
       * ```
       */
      recommendation<Config extends Alova2MethodConfig<Record<string, Food_FoodService_FOOD_LIST_FETCHER[]>>>(
        config?: Config
      ): Alova2Method<Record<string, Food_FoodService_FOOD_LIST_FETCHER[]>, 'FoodController.recommendation', Config>;
      /**
       * ---
       *
       * [PUT] 修改食品信息
       *
       * **path:** /food/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   name?: string
       *   code?: string
       *   price?: number
       *   picture?: string
       *   description?: string
       *   stallId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      updateFood<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          data: FoodSaveInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'FoodController.updateFood', Config>;
      /**
       * ---
       *
       * [PATCH] 修改食品价格
       *
       * **path:** /food/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   price: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      updateFoodPrice<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          params: {
            /**
             * [required]
             */
            price: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'FoodController.updateFoodPrice', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /food/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      deleteFood<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'FoodController.deleteFood', Config>;
    };
    ObjectController: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /images/**
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      imageFetch<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'ObjectController.imageFetch', Config>;
    };
    OrderController: {
      /**
       * ---
       *
       * [GET] 查询订单状态
       *
       * **path:** /order/status/{code}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   code: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string
       * ```
       */
      getOrderStatus<
        Config extends Alova2MethodConfig<string> & {
          pathParams: {
            /**
             * [required]
             */
            code: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'OrderController.getOrderStatus', Config>;
      /**
       * ---
       *
       * [POST] 拍照上传到minio 再调用算法识别 构建订单 生成支付二维码返回
       *
       * **path:** /order/upload
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   file?: Blob
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: string
       *   totalPrice?: number
       *   picture?: string
       *   orderItems?: Array<{
       *     totalPrice?: number
       *     totalNumber?: number
       *     food?: {
       *       name?: string
       *     }
       *   }>
       *   qrCode?: string
       * }
       * ```
       */
      uploadOrder<
        Config extends Alova2MethodConfig<OrderPayView> & {
          data: {
            file?: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<OrderPayView, 'OrderController.uploadOrder', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /order/{id}/order_item
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   createTime?: string
       *   modifyTime?: string
       *   modifier?: number
       *   id?: number
       *   code?: string
       *   totalPrice?: number
       *   picture?: string
       *   state?: number
       *   stall?: {
       *     createTime?: string
       *     modifyTime?: string
       *     creator?: number
       *     modifier?: number
       *     id?: number
       *     name?: string
       *     directorName?: string
       *     directorPhone?: string
       *     foodNumber?: number
       *     user?: {
       *       createTime?: string
       *       modifyTime?: string
       *       modifier?: number
       *       id?: number
       *       username?: string
       *       phone?: string
       *       password?: string
       *       email?: string
       *       avatar?: string
       *       roles?: Array<{
       *         createTime?: string
       *         modifyTime?: string
       *         creator?: number
       *         modifier?: number
       *         id?: number
       *         code?: string
       *         users?: Array<Dynamic_User>
       *         permissions?: Array<{
       *           createTime?: string
       *           modifyTime?: string
       *           creator?: number
       *           modifier?: number
       *           id?: number
       *           code?: string
       *           roles?: Array<Dynamic_Role>
       *         }>
       *       }>
       *       canteen?: {
       *         createTime?: string
       *         modifyTime?: string
       *         creator?: number
       *         modifier?: number
       *         id?: number
       *         name?: string
       *         directorName?: string
       *         directorPhone?: string
       *         address?: string
       *         stallNumber?: number
       *         user?: Dynamic_User
       *         stalls?: Array<Dynamic_Stall>
       *       }
       *       stall?: Dynamic_Stall
       *     }
       *     canteen?: Dynamic_Canteen
       *     orders?: Array<Dynamic_Order>
       *     foods?: Array<{
       *       createTime?: string
       *       modifyTime?: string
       *       creator?: number
       *       modifier?: number
       *       id?: number
       *       name?: string
       *       code?: string
       *       price?: number
       *       picture?: string
       *       description?: string
       *       stall?: Dynamic_Stall
       *       orderItems?: Array<{
       *         createTime?: string
       *         modifyTime?: string
       *         modifier?: number
       *         id?: number
       *         totalNumber?: number
       *         totalPrice?: number
       *         order?: Dynamic_Order
       *         food?: Dynamic_Food
       *       }>
       *       sales?: {
       *         modifier?: number
       *         createTime?: string
       *         modifyTime?: string
       *         id?: number
       *         number?: number
       *         food?: Dynamic_Food
       *         stall?: Dynamic_Stall
       *       }
       *     }>
       *     sales?: Array<Dynamic_Sales>
       *   }
       *   orderItems?: Array<Dynamic_OrderItem>
       * }
       * ```
       */
      getOrderItem<
        Config extends Alova2MethodConfig<Dynamic_Order> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Dynamic_Order, 'OrderController.getOrderItem', Config>;
    };
    RoleController: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /role
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   createTime?: string
       *   modifyTime?: string
       *   creator?: number
       *   modifier?: number
       *   id?: number
       *   code?: string
       *   users?: Array<Dynamic_User>
       *   permissions?: Array<{
       *     createTime?: string
       *     modifyTime?: string
       *     creator?: number
       *     modifier?: number
       *     id?: number
       *     code?: string
       *     roles?: Array<Dynamic_Role>
       *   }>
       * }>
       * ```
       */
      queryRoles<Config extends Alova2MethodConfig<Dynamic_Role[]>>(
        config?: Config
      ): Alova2Method<Dynamic_Role[], 'RoleController.queryRoles', Config>;
    };
    SalesController: {
      /**
       * ---
       *
       * [GET] 超级管理员用
       *
       * **path:** /sales/list/canteen/ranking
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   stallName?: string
       *   sales?: number
       * }>
       * ```
       */
      listCanteenRanking<Config extends Alova2MethodConfig<CanteenSalesResponse[]>>(
        config?: Config
      ): Alova2Method<CanteenSalesResponse[], 'SalesController.listCanteenRanking', Config>;
      /**
       * ---
       *
       * [GET] 食堂管理员用
       *
       * **path:** /sales/list/canteen/stall/history
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   startDay: string
       *   // [required]
       *   endDay: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   number?: number
       *   day?: string
       * }>
       * ```
       */
      listCanteenHistorySales<
        Config extends Alova2MethodConfig<SalesHistoryView[]> & {
          params: {
            /**
             * [required]
             */
            startDay: string;
            /**
             * [required]
             */
            endDay: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<SalesHistoryView[], 'SalesController.listCanteenHistorySales', Config>;
      /**
       * ---
       *
       * [GET] 食堂管理员用
       *
       * **path:** /sales/list/canteen/stall/ranking
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   stallName?: string
       *   sales?: number
       * }>
       * ```
       */
      listCanteenStallRanking<Config extends Alova2MethodConfig<CanteenStallSalesResponse[]>>(
        config?: Config
      ): Alova2Method<CanteenStallSalesResponse[], 'SalesController.listCanteenStallRanking', Config>;
      /**
       * ---
       *
       * [GET] 食堂管理员用
       *
       * **path:** /sales/list/canteen/stall/yesterday
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   stallName?: string
       *   sales?: number
       * }>
       * ```
       */
      listEveryStallYesterdaySales<Config extends Alova2MethodConfig<CanteenStallSalesResponse[]>>(
        config?: Config
      ): Alova2Method<CanteenStallSalesResponse[], 'SalesController.listEveryStallYesterdaySales', Config>;
      /**
       * ---
       *
       * [GET] 超级管理员
       *
       * **path:** /sales/list/canteen/yesterday
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   stallName?: string
       *   sales?: number
       * }>
       * ```
       */
      listEveryCanteenYesterdaySales<Config extends Alova2MethodConfig<CanteenSalesResponse[]>>(
        config?: Config
      ): Alova2Method<CanteenSalesResponse[], 'SalesController.listEveryCanteenYesterdaySales', Config>;
      /**
       * ---
       *
       * [GET] 摊位管理员用
       *
       * **path:** /sales/list/stall/food/ranking
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   foodName?: string
       *   sales?: number
       * }>
       * ```
       */
      listStallFoodRanking<Config extends Alova2MethodConfig<StallFoodSalesResponse[]>>(
        config?: Config
      ): Alova2Method<StallFoodSalesResponse[], 'SalesController.listStallFoodRanking', Config>;
      /**
       * ---
       *
       * [GET] 摊位管理员用
       *
       * **path:** /sales/list/stall/food/yesterday
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   foodName?: string
       *   sales?: number
       * }>
       * ```
       */
      listEveryFoodYesterdaySales<Config extends Alova2MethodConfig<StallFoodSalesResponse[]>>(
        config?: Config
      ): Alova2Method<StallFoodSalesResponse[], 'SalesController.listEveryFoodYesterdaySales', Config>;
      /**
       * ---
       *
       * [GET] 摊位管理员用
       *
       * **path:** /sales/list/stall/history
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   startDay: string
       *   // [required]
       *   endDay: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   number?: number
       *   day?: string
       * }>
       * ```
       */
      listStallHistorySales<
        Config extends Alova2MethodConfig<SalesHistoryView[]> & {
          params: {
            /**
             * [required]
             */
            startDay: string;
            /**
             * [required]
             */
            endDay: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<SalesHistoryView[], 'SalesController.listStallHistorySales', Config>;
    };
    StallController: {
      /**
       * ---
       *
       * [POST] 新增摊位
       *
       * **path:** /stall
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   name?: string
       *   directorName?: string
       *   directorPhone?: string
       *   canteenId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      createStall<
        Config extends Alova2MethodConfig<unknown> & {
          data: StallSaveInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'StallController.createStall', Config>;
      /**
       * ---
       *
       * [GET] 食堂管理员用
       *
       * **path:** /stall/every/food_number
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   id?: number
       *   foodNumber?: number
       *   name?: string
       * }>
       * ```
       */
      listEveryFoodNumber<Config extends Alova2MethodConfig<Stall_StallService_STALL_FOOD_NUMBER_FETCHER[]>>(
        config?: Config
      ): Alova2Method<Stall_StallService_STALL_FOOD_NUMBER_FETCHER[], 'StallController.listEveryFoodNumber', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /stall/list
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   id?: number
       *   name?: string
       *   canteen?: {
       *     id?: number
       *     name?: string
       *   }
       * }>
       * ```
       */
      listStall<Config extends Alova2MethodConfig<Stall_StallService_STALL_LIST_FETCHER[]>>(
        config?: Config
      ): Alova2Method<Stall_StallService_STALL_LIST_FETCHER[], 'StallController.listStall', Config>;
      /**
       * ---
       *
       * [GET] 超级管理员和食堂管理员用
       *
       * **path:** /stall/number
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = number
       * ```
       */
      getStallNumber<Config extends Alova2MethodConfig<number>>(
        config?: Config
      ): Alova2Method<number, 'StallController.getStallNumber', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /stall/page
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   pageIndex: number
       *   // [required]
       *   pageSize: number
       *   // [required]
       *   canteenId: number
       *   // [required]
       *   stallName: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   rows?: Array<{
       *     id?: number
       *     createTime?: string
       *     modifyTime?: string
       *     creator?: number
       *     modifier?: number
       *     name?: string
       *     directorName?: string
       *     directorPhone?: string
       *     canteen?: {
       *       id?: number
       *       name?: string
       *     }
       *     user?: {
       *       id?: number
       *       username?: string
       *     }
       *   }>
       *   totalPageCount?: number
       *   totalRowCount?: number
       * }
       * ```
       */
      pageStall<
        Config extends Alova2MethodConfig<Page_Stall_StallService_STALL_FETCHER> & {
          params: {
            /**
             * [required]
             */
            pageIndex: number;
            /**
             * [required]
             */
            pageSize: number;
            /**
             * [required]
             */
            canteenId: number;
            /**
             * [required]
             */
            stallName: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Page_Stall_StallService_STALL_FETCHER, 'StallController.pageStall', Config>;
      /**
       * ---
       *
       * [PUT] 更新摊位
       *
       * **path:** /stall/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   name?: string
       *   directorName?: string
       *   directorPhone?: string
       *   canteenId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      updateStall<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          data: StallSaveInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'StallController.updateStall', Config>;
      /**
       * ---
       *
       * [DELETE] 删除摊位
       *
       * **path:** /stall/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      deleteStall<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'StallController.deleteStall', Config>;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /stall/{id}/user/{userId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       *   // [required]
       *   userId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      allocationCanteen_2<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
            /**
             * [required]
             */
            userId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'StallController.allocationCanteen_2', Config>;
    };
    TestController: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /test/captcha
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   email: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string
       * ```
       */
      getCaptcha<
        Config extends Alova2MethodConfig<string> & {
          params: {
            /**
             * [required]
             */
            email: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'TestController.getCaptcha', Config>;
    };
    UserController: {
      /**
       * ---
       *
       * [GET] 获取用户信息
       *
       * **path:** /user
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: number
       *   username?: string
       *   email?: string
       *   phone?: string
       *   createTime?: string
       *   avatar?: string
       *   roles?: string[]
       * }
       * ```
       */
      queryUserInfo<Config extends Alova2MethodConfig<UserInfoView>>(
        config?: Config
      ): Alova2Method<UserInfoView, 'UserController.queryUserInfo', Config>;
      /**
       * ---
       *
       * [POST] 上传头像
       *
       * **path:** /user/avatar
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   file?: Blob
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string
       * ```
       */
      uploadAvatar<
        Config extends Alova2MethodConfig<string> & {
          data: {
            file?: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'UserController.uploadAvatar', Config>;
      /**
       * ---
       *
       * [PUT] 修改邮箱
       *
       * **path:** /user/email
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string
       *   code?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      updateEmail<
        Config extends Alova2MethodConfig<unknown> & {
          data: UserUpdateEmailInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'UserController.updateEmail', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /user/import
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   file?: Blob
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      importUser<
        Config extends Alova2MethodConfig<unknown> & {
          data: {
            file?: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'UserController.importUser', Config>;
      /**
       * ---
       *
       * [GET] 获取全部用户信息
       *
       * **path:** /user/page
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   pageIndex: number
       *   // [required]
       *   pageSize: number
       *   // [required]
       *   username: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   rows?: Array<{
       *     createTime?: string
       *     modifyTime?: string
       *     modifier?: number
       *     id?: number
       *     username?: string
       *     phone?: string
       *     password?: string
       *     email?: string
       *     avatar?: string
       *     roles?: Array<{
       *       createTime?: string
       *       modifyTime?: string
       *       creator?: number
       *       modifier?: number
       *       id?: number
       *       code?: string
       *       users?: Array<Dynamic_User>
       *       permissions?: Array<{
       *         createTime?: string
       *         modifyTime?: string
       *         creator?: number
       *         modifier?: number
       *         id?: number
       *         code?: string
       *         roles?: Array<Dynamic_Role>
       *       }>
       *     }>
       *     canteen?: {
       *       createTime?: string
       *       modifyTime?: string
       *       creator?: number
       *       modifier?: number
       *       id?: number
       *       name?: string
       *       directorName?: string
       *       directorPhone?: string
       *       address?: string
       *       stallNumber?: number
       *       user?: Dynamic_User
       *       stalls?: Array<Dynamic_Stall>
       *     }
       *     stall?: Dynamic_Stall
       *   }>
       *   totalPageCount?: number
       *   totalRowCount?: number
       * }
       * ```
       */
      pageUser<
        Config extends Alova2MethodConfig<Page_Dynamic_User> & {
          params: {
            /**
             * [required]
             */
            pageIndex: number;
            /**
             * [required]
             */
            pageSize: number;
            /**
             * [required]
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Page_Dynamic_User, 'UserController.pageUser', Config>;
      /**
       * ---
       *
       * [PUT] 修改密码
       *
       * **path:** /user/password
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   oldPassword?: string
       *   newPassword?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      updatePassword<
        Config extends Alova2MethodConfig<unknown> & {
          data: UserUpdatePasswordInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'UserController.updatePassword', Config>;
      /**
       * ---
       *
       * [PUT] 修改用户绑定的角色
       *
       * **path:** /user/role
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       *   roleIds?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   isRowAffected?: boolean
       *   totalAffectedRowCount?: number
       *   affectedRowCountMap?: Record<string, number>
       *   originalEntity?: {
       *     createTime?: string
       *     modifyTime?: string
       *     modifier?: number
       *     id?: number
       *     username?: string
       *     phone?: string
       *     password?: string
       *     email?: string
       *     avatar?: string
       *     roles?: Array<{
       *       createTime?: string
       *       modifyTime?: string
       *       creator?: number
       *       modifier?: number
       *       id?: number
       *       code?: string
       *       users?: Array<Dynamic_User>
       *       permissions?: Array<{
       *         createTime?: string
       *         modifyTime?: string
       *         creator?: number
       *         modifier?: number
       *         id?: number
       *         code?: string
       *         roles?: Array<Dynamic_Role>
       *       }>
       *     }>
       *     canteen?: {
       *       createTime?: string
       *       modifyTime?: string
       *       creator?: number
       *       modifier?: number
       *       id?: number
       *       name?: string
       *       directorName?: string
       *       directorPhone?: string
       *       address?: string
       *       stallNumber?: number
       *       user?: Dynamic_User
       *       stalls?: Array<Dynamic_Stall>
       *     }
       *     stall?: Dynamic_Stall
       *   }
       *   modifiedEntity?: Dynamic_User
       *   isModified?: boolean
       * }
       * ```
       */
      updateUserRole<
        Config extends Alova2MethodConfig<KSimpleSaveResult_Dynamic_User> & {
          data: UserUpdateRoleInput;
        }
      >(
        config: Config
      ): Alova2Method<KSimpleSaveResult_Dynamic_User, 'UserController.updateUserRole', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /user/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      deleteUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'UserController.deleteUser', Config>;
      /**
       * ---
       *
       * [PATCH] 重置员工密码
       *
       * **path:** /user/{userId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   userId: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   password?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      resetUserPassword<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            userId: number;
          };
          data: UserAdminResetPasswordInput;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'UserController.resetUserPassword', Config>;
    };
    WebhookController: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /webhook/alipay/notify
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      handleNotify<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'WebhookController.handleNotify', Config>;
    };
  }

  var Apis: Apis;
}
